generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  username        String
  password        String
  role            String            @default("reader")
  image           String?
  coin            Int               @default(0)
  author          author?
  chapter_comment chapter_comment[]
  novel_review    novel_review[]
  user_library    user_library[]

  novel_history novel_history[]
}

model author {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  image     String?
  pen_name  String   @unique
  gender    String
  email     String
  phone     String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
  novel     novel[]
}

model novel {
  id              Int              @id @default(autoincrement())
  title           String
  genre           String
  synopsis        String
  content_rating  String
  authorId        Int
  cover           String
  target_audience String
  views           Int              @default(0)
  status          String           @default("berjalan")
  reviewd_by      Int[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  type            String           @default("gratis")
  liked_by        Int[]
  library_detail  library_detail[]
  author          author           @relation(fields: [authorId], references: [id])
  chapter         novel_chapter[]
  novel_review    novel_review[]
  tag             tag_novel[]

  novel_history novel_history[]
}

model user_library {
  id             Int              @id @default(autoincrement())
  userId         Int
  title          String?
  library_detail library_detail[]
  user           user             @relation(fields: [userId], references: [id])
}

model library_detail {
  id        Int          @id @default(autoincrement())
  libraryId Int
  novelId   Int
  library   user_library @relation(fields: [libraryId], references: [id])
  novel     novel        @relation(fields: [novelId], references: [id])
}

model novel_history {
  id             Int           @id @default(autoincrement())
  novelId        Int
  userId         Int
  novelChapterId Int
  novel_chapter  novel_chapter @relation(fields: [novelChapterId], references: [id])
  user           user          @relation(fields: [userId], references: [id])
  novel          novel         @relation(fields: [novelId], references: [id])
}

model novel_review {
  id        Int      @id @default(autoincrement())
  rating    Int
  review    String?
  novelId   Int
  userId    Int
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  liked_by  Int[]
  novel     novel    @relation(fields: [novelId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model novel_chapter {
  id        Int               @id @default(autoincrement())
  chapter   Int               @default(0)
  title     String
  content   String
  novelId   Int
  views     Int               @default(0)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  comment   chapter_comment[]
  novel     novel             @relation(fields: [novelId], references: [id])

  novel_history novel_history[]
}

model chapter_comment {
  id        Int           @id @default(autoincrement())
  comment   String
  chapterId Int
  userId    Int
  chapter   novel_chapter @relation(fields: [chapterId], references: [id])
  user      user          @relation(fields: [userId], references: [id])
}

model tag_novel {
  id      Int    @id @default(autoincrement())
  tag     String
  novelId Int
  novel   novel  @relation(fields: [novelId], references: [id])
}

model genre {
  id    Int    @id @default(autoincrement())
  genre String
}
